The while loop is ideal when you want to use a loop, but you don't know how many times you'll have to execute that loop.

SYNTAX:
while(condition){
    // Do something!
}

As long as the condition evaluates to true, the loop will continue to run. As soon as it's false, it'll stop. 
You NEED to have a false condition, otherwise it'll go into infinitive loop which will crash our brower

If you give a while loop a condition that is true and you don't build in a way for that condition to possibly become false,
the loop will go on forever and your program will crash.
Remember to set up the condition you're checking outside the loopâ€”if you do it in the loop,
it will keep resetting and the loop could go on forever!

DO/WHILE

Sometimes you want to make sure your loop runs at least one time no matter what.
When this is the case, you want a modified while loop called a do/while loop.
After that, it's just like a normal while: the loop will continue so long as the condition being evaluated is true.
SYNTAX:
do {

    // The thing to do at least once!

} while(  /* some condition */  );





